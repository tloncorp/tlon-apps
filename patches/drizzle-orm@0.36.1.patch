diff --git a/op-sqlite/session.cjs b/op-sqlite/session.cjs
index f1ce597e8a6e0e325788cac540a8fde32d36bb42..e6e2e6a65efa6f725d07264cc7c3a2a7040449a0 100644
--- a/op-sqlite/session.cjs
+++ b/op-sqlite/session.cjs
@@ -49,33 +49,30 @@ class OPSQLiteSession extends import_session.SQLiteSession {
       customResultMapper
     );
   }
-  transaction(transaction, config = {}) {
-    const tx = new OPSQLiteTransaction("async", this.dialect, this, this.schema);
-    this.run(import_sql.sql.raw(`begin${config?.behavior ? " " + config.behavior : ""}`));
-    try {
-      const result = transaction(tx);
-      this.run(import_sql.sql`commit`);
-      return result;
-    } catch (err) {
-      this.run(import_sql.sql`rollback`);
-      throw err;
-    }
+  transaction(transaction, _config) {
+    return new Promise((resolve, reject) => {
+      this.client.transaction(async () => {
+        const tx = new OPSQLiteTransaction(
+          "async",
+          this.dialect,
+          this,
+          this.schema
+        );
+        try {
+          resolve(await transaction(tx));
+        } catch (e) {
+          reject(e);
+        }
+      });
+    });
   }
 }
 class OPSQLiteTransaction extends import_sqlite_core.SQLiteTransaction {
   static [import_entity.entityKind] = "OPSQLiteTransaction";
-  transaction(transaction) {
-    const savepointName = `sp${this.nestedIndex}`;
-    const tx = new OPSQLiteTransaction("async", this.dialect, this.session, this.schema, this.nestedIndex + 1);
-    this.session.run(import_sql.sql.raw(`savepoint ${savepointName}`));
-    try {
-      const result = transaction(tx);
-      this.session.run(import_sql.sql.raw(`release savepoint ${savepointName}`));
-      return result;
-    } catch (err) {
-      this.session.run(import_sql.sql.raw(`rollback to savepoint ${savepointName}`));
-      throw err;
-    }
+  transaction(_transaction) {
+    throw new Error(
+      "nested transactions not implemented for op-sqlite, sorry!"
+    );
   }
 }
 class OPSQLitePreparedQuery extends import_session.SQLitePreparedQuery {
@@ -94,7 +91,14 @@ class OPSQLitePreparedQuery extends import_session.SQLitePreparedQuery {
     return this.client.executeAsync(this.query.sql, params);
   }
   async all(placeholderValues) {
-    const { fields, joinsNotNullableMap, query, logger, customResultMapper, client } = this;
+    const {
+      fields,
+      joinsNotNullableMap,
+      query,
+      logger,
+      customResultMapper,
+      client
+    } = this;
     if (!fields && !customResultMapper) {
       const params = (0, import_sql.fillPlaceholders)(query.params, placeholderValues ?? {});
       logger.logQuery(query.sql, params);
@@ -107,7 +111,14 @@ class OPSQLitePreparedQuery extends import_session.SQLitePreparedQuery {
     return rows.map((row) => (0, import_utils.mapResultRow)(fields, row, joinsNotNullableMap));
   }
   async get(placeholderValues) {
-    const { fields, joinsNotNullableMap, customResultMapper, query, logger, client } = this;
+    const {
+      fields,
+      joinsNotNullableMap,
+      customResultMapper,
+      query,
+      logger,
+      client
+    } = this;
     const params = (0, import_sql.fillPlaceholders)(query.params, placeholderValues ?? {});
     logger.logQuery(query.sql, params);
     if (!fields && !customResultMapper) {
diff --git a/op-sqlite/session.cjs.map b/op-sqlite/session.cjs.map
index 0a873b1dc081a183d3be8f8c0acd65e90067627b..8f94cfe8a95964bfb98f1322069ff5e29f25fcd7 100644
--- a/op-sqlite/session.cjs.map
+++ b/op-sqlite/session.cjs.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/op-sqlite/session.ts"],"sourcesContent":["import type { OPSQLiteConnection, QueryResult } from '@op-engineering/op-sqlite';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { NoopLogger } from '~/logger.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { fillPlaceholders, type Query, sql } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport { SQLiteTransaction } from '~/sqlite-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/sqlite-core/query-builders/select.types.ts';\nimport {\n\ttype PreparedQueryConfig as PreparedQueryConfigBase,\n\ttype SQLiteExecuteMethod,\n\tSQLitePreparedQuery,\n\tSQLiteSession,\n\ttype SQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport { mapResultRow } from '~/utils.ts';\n\nexport interface OPSQLiteSessionOptions {\n\tlogger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;\n\nexport class OPSQLiteSession<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteSession<'async', QueryResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'OPSQLiteSession';\n\n\tprivate logger: Logger;\n\n\tconstructor(\n\t\tprivate client: OPSQLiteConnection,\n\t\tdialect: SQLiteAsyncDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\toptions: OPSQLiteSessionOptions = {},\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t}\n\n\tprepareQuery<T extends Omit<PreparedQueryConfig, 'run'>>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t): OPSQLitePreparedQuery<T> {\n\t\treturn new OPSQLitePreparedQuery(\n\t\t\tthis.client,\n\t\t\tquery,\n\t\t\tthis.logger,\n\t\t\tfields,\n\t\t\texecuteMethod,\n\t\t\tisResponseInArrayMode,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\toverride transaction<T>(\n\t\ttransaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T,\n\t\tconfig: SQLiteTransactionConfig = {},\n\t): T {\n\t\tconst tx = new OPSQLiteTransaction('async', this.dialect, this, this.schema);\n\t\tthis.run(sql.raw(`begin${config?.behavior ? ' ' + config.behavior : ''}`));\n\t\ttry {\n\t\t\tconst result = transaction(tx);\n\t\t\tthis.run(sql`commit`);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthis.run(sql`rollback`);\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class OPSQLiteTransaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<'async', QueryResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'OPSQLiteTransaction';\n\n\toverride transaction<T>(transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T): T {\n\t\tconst savepointName = `sp${this.nestedIndex}`;\n\t\tconst tx = new OPSQLiteTransaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);\n\t\tthis.session.run(sql.raw(`savepoint ${savepointName}`));\n\t\ttry {\n\t\t\tconst result = transaction(tx);\n\t\t\tthis.session.run(sql.raw(`release savepoint ${savepointName}`));\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthis.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class OPSQLitePreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<\n\t{ type: 'async'; run: QueryResult; all: T['all']; get: T['get']; values: T['values']; execute: T['execute'] }\n> {\n\tstatic override readonly [entityKind]: string = 'OPSQLitePreparedQuery';\n\n\tconstructor(\n\t\tprivate client: OPSQLiteConnection,\n\t\tquery: Query,\n\t\tprivate logger: Logger,\n\t\tprivate fields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tprivate _isResponseInArrayMode: boolean,\n\t\tprivate customResultMapper?: (rows: unknown[][]) => unknown,\n\t) {\n\t\tsuper('sync', executeMethod, query);\n\t}\n\n\trun(placeholderValues?: Record<string, unknown>): Promise<QueryResult> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\n\t\treturn this.client.executeAsync(this.query.sql, params);\n\t}\n\n\tasync all(placeholderValues?: Record<string, unknown>): Promise<T['all']> {\n\t\tconst { fields, joinsNotNullableMap, query, logger, customResultMapper, client } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\n\t\t\treturn client.execute(query.sql, params).rows?._array || [];\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues) as unknown[][];\n\t\tif (customResultMapper) {\n\t\t\treturn customResultMapper(rows) as T['all'];\n\t\t}\n\t\treturn rows.map((row) => mapResultRow(fields!, row, joinsNotNullableMap));\n\t}\n\n\tasync get(placeholderValues?: Record<string, unknown>): Promise<T['get']> {\n\t\tconst { fields, joinsNotNullableMap, customResultMapper, query, logger, client } = this;\n\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\tlogger.logQuery(query.sql, params);\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst rows = client.execute(query.sql, params).rows?._array || [];\n\t\t\treturn rows[0];\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues) as unknown[][];\n\t\tconst row = rows[0];\n\n\t\tif (!row) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (customResultMapper) {\n\t\t\treturn customResultMapper(rows) as T['get'];\n\t\t}\n\n\t\treturn mapResultRow(fields!, row, joinsNotNullableMap);\n\t}\n\n\tvalues(placeholderValues?: Record<string, unknown>): Promise<T['values']> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\treturn this.client.executeRawAsync(this.query.sql, params);\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn this._isResponseInArrayMode;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAA2B;AAE3B,oBAA2B;AAE3B,iBAAkD;AAElD,yBAAkC;AAElC,qBAMO;AACP,mBAA6B;AAQtB,MAAM,wBAGH,6BAA0D;AAAA,EAKnE,YACS,QACR,SACQ,QACR,UAAkC,CAAC,GAClC;AACD,UAAM,OAAO;AALL;AAEA;AAIR,SAAK,SAAS,QAAQ,UAAU,IAAI,yBAAW;AAAA,EAChD;AAAA,EAZA,QAA0B,wBAAU,IAAY;AAAA,EAExC;AAAA,EAYR,aACC,OACA,QACA,eACA,uBACA,oBAC2B;AAC3B,WAAO,IAAI;AAAA,MACV,KAAK;AAAA,MACL;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAES,YACR,aACA,SAAkC,CAAC,GAC/B;AACJ,UAAM,KAAK,IAAI,oBAAoB,SAAS,KAAK,SAAS,MAAM,KAAK,MAAM;AAC3E,SAAK,IAAI,eAAI,IAAI,QAAQ,QAAQ,WAAW,MAAM,OAAO,WAAW,EAAE,EAAE,CAAC;AACzE,QAAI;AACH,YAAM,SAAS,YAAY,EAAE;AAC7B,WAAK,IAAI,sBAAW;AACpB,aAAO;AAAA,IACR,SAAS,KAAK;AACb,WAAK,IAAI,wBAAa;AACtB,YAAM;AAAA,IACP;AAAA,EACD;AACD;AAEO,MAAM,4BAGH,qCAA8D;AAAA,EACvE,QAA0B,wBAAU,IAAY;AAAA,EAEvC,YAAe,aAAsE;AAC7F,UAAM,gBAAgB,KAAK,KAAK,WAAW;AAC3C,UAAM,KAAK,IAAI,oBAAoB,SAAS,KAAK,SAAS,KAAK,SAAS,KAAK,QAAQ,KAAK,cAAc,CAAC;AACzG,SAAK,QAAQ,IAAI,eAAI,IAAI,aAAa,aAAa,EAAE,CAAC;AACtD,QAAI;AACH,YAAM,SAAS,YAAY,EAAE;AAC7B,WAAK,QAAQ,IAAI,eAAI,IAAI,qBAAqB,aAAa,EAAE,CAAC;AAC9D,aAAO;AAAA,IACR,SAAS,KAAK;AACb,WAAK,QAAQ,IAAI,eAAI,IAAI,yBAAyB,aAAa,EAAE,CAAC;AAClE,YAAM;AAAA,IACP;AAAA,EACD;AACD;AAEO,MAAM,8BAAmF,mCAE9F;AAAA,EAGD,YACS,QACR,OACQ,QACA,QACR,eACQ,wBACA,oBACP;AACD,UAAM,QAAQ,eAAe,KAAK;AAR1B;AAEA;AACA;AAEA;AACA;AAAA,EAGT;AAAA,EAZA,QAA0B,wBAAU,IAAY;AAAA,EAchD,IAAI,mBAAmE;AACtE,UAAM,aAAS,6BAAiB,KAAK,MAAM,QAAQ,qBAAqB,CAAC,CAAC;AAC1E,SAAK,OAAO,SAAS,KAAK,MAAM,KAAK,MAAM;AAE3C,WAAO,KAAK,OAAO,aAAa,KAAK,MAAM,KAAK,MAAM;AAAA,EACvD;AAAA,EAEA,MAAM,IAAI,mBAAgE;AACzE,UAAM,EAAE,QAAQ,qBAAqB,OAAO,QAAQ,oBAAoB,OAAO,IAAI;AACnF,QAAI,CAAC,UAAU,CAAC,oBAAoB;AACnC,YAAM,aAAS,6BAAiB,MAAM,QAAQ,qBAAqB,CAAC,CAAC;AACrE,aAAO,SAAS,MAAM,KAAK,MAAM;AAEjC,aAAO,OAAO,QAAQ,MAAM,KAAK,MAAM,EAAE,MAAM,UAAU,CAAC;AAAA,IAC3D;AAEA,UAAM,OAAO,MAAM,KAAK,OAAO,iBAAiB;AAChD,QAAI,oBAAoB;AACvB,aAAO,mBAAmB,IAAI;AAAA,IAC/B;AACA,WAAO,KAAK,IAAI,CAAC,YAAQ,2BAAa,QAAS,KAAK,mBAAmB,CAAC;AAAA,EACzE;AAAA,EAEA,MAAM,IAAI,mBAAgE;AACzE,UAAM,EAAE,QAAQ,qBAAqB,oBAAoB,OAAO,QAAQ,OAAO,IAAI;AACnF,UAAM,aAAS,6BAAiB,MAAM,QAAQ,qBAAqB,CAAC,CAAC;AACrE,WAAO,SAAS,MAAM,KAAK,MAAM;AACjC,QAAI,CAAC,UAAU,CAAC,oBAAoB;AACnC,YAAMA,QAAO,OAAO,QAAQ,MAAM,KAAK,MAAM,EAAE,MAAM,UAAU,CAAC;AAChE,aAAOA,MAAK,CAAC;AAAA,IACd;AAEA,UAAM,OAAO,MAAM,KAAK,OAAO,iBAAiB;AAChD,UAAM,MAAM,KAAK,CAAC;AAElB,QAAI,CAAC,KAAK;AACT,aAAO;AAAA,IACR;AAEA,QAAI,oBAAoB;AACvB,aAAO,mBAAmB,IAAI;AAAA,IAC/B;AAEA,eAAO,2BAAa,QAAS,KAAK,mBAAmB;AAAA,EACtD;AAAA,EAEA,OAAO,mBAAmE;AACzE,UAAM,aAAS,6BAAiB,KAAK,MAAM,QAAQ,qBAAqB,CAAC,CAAC;AAC1E,SAAK,OAAO,SAAS,KAAK,MAAM,KAAK,MAAM;AAC3C,WAAO,KAAK,OAAO,gBAAgB,KAAK,MAAM,KAAK,MAAM;AAAA,EAC1D;AAAA;AAAA,EAGA,wBAAiC;AAChC,WAAO,KAAK;AAAA,EACb;AACD;","names":["rows"]}
\ No newline at end of file
+{"version":3,"sources":["../../src/op-sqlite/session.ts"],"sourcesContent":["import type {\n  OPSQLiteConnection,\n  QueryResult,\n} from \"@op-engineering/op-sqlite\";\nimport { entityKind } from \"~/entity.ts\";\nimport type { Logger } from \"~/logger.ts\";\nimport { NoopLogger } from \"~/logger.ts\";\nimport type {\n  RelationalSchemaConfig,\n  TablesRelationalConfig,\n} from \"~/relations.ts\";\nimport { fillPlaceholders, type Query } from \"~/sql/sql.ts\";\nimport type { SQLiteAsyncDialect } from \"~/sqlite-core/dialect.ts\";\nimport { SQLiteTransaction } from \"~/sqlite-core/index.ts\";\nimport type { SelectedFieldsOrdered } from \"~/sqlite-core/query-builders/select.types.ts\";\nimport {\n  type PreparedQueryConfig as PreparedQueryConfigBase,\n  type SQLiteExecuteMethod,\n  SQLitePreparedQuery,\n  SQLiteSession,\n  type SQLiteTransactionConfig,\n} from \"~/sqlite-core/session.ts\";\nimport { mapResultRow } from \"~/utils.ts\";\n\nexport interface OPSQLiteSessionOptions {\n  logger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, \"statement\" | \"run\">;\n\nexport class OPSQLiteSession<\n  TFullSchema extends Record<string, unknown>,\n  TSchema extends TablesRelationalConfig,\n> extends SQLiteSession<\"async\", QueryResult, TFullSchema, TSchema> {\n  static override readonly [entityKind]: string = \"OPSQLiteSession\";\n\n  private logger: Logger;\n\n  constructor(\n    private client: OPSQLiteConnection,\n    dialect: SQLiteAsyncDialect,\n    private schema: RelationalSchemaConfig<TSchema> | undefined,\n    options: OPSQLiteSessionOptions = {}\n  ) {\n    super(dialect);\n    this.logger = options.logger ?? new NoopLogger();\n  }\n\n  prepareQuery<T extends Omit<PreparedQueryConfig, \"run\">>(\n    query: Query,\n    fields: SelectedFieldsOrdered | undefined,\n    executeMethod: SQLiteExecuteMethod,\n    isResponseInArrayMode: boolean,\n    customResultMapper?: (rows: unknown[][]) => unknown\n  ): OPSQLitePreparedQuery<T> {\n    return new OPSQLitePreparedQuery(\n      this.client,\n      query,\n      this.logger,\n      fields,\n      executeMethod,\n      isResponseInArrayMode,\n      customResultMapper\n    );\n  }\n  override transaction<T>(\n    transaction: (\n      tx: OPSQLiteTransaction<TFullSchema, TSchema>\n    ) => T | Promise<T>,\n    _config?: SQLiteTransactionConfig\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.client.transaction(async () => {\n        const tx = new OPSQLiteTransaction(\n          \"async\",\n          this.dialect,\n          this,\n          this.schema\n        );\n        try {\n          resolve(await transaction(tx));\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n}\n\nexport class OPSQLiteTransaction<\n  TFullSchema extends Record<string, unknown>,\n  TSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<\"async\", QueryResult, TFullSchema, TSchema> {\n  static override readonly [entityKind]: string = \"OPSQLiteTransaction\";\n\n  override transaction<T>(\n    _transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T\n  ): T {\n    throw new Error(\n      \"nested transactions not implemented for op-sqlite, sorry!\"\n    );\n  }\n}\n\nexport class OPSQLitePreparedQuery<\n  T extends PreparedQueryConfig = PreparedQueryConfig,\n> extends SQLitePreparedQuery<{\n  type: \"async\";\n  run: QueryResult;\n  all: T[\"all\"];\n  get: T[\"get\"];\n  values: T[\"values\"];\n  execute: T[\"execute\"];\n}> {\n  static override readonly [entityKind]: string = \"OPSQLitePreparedQuery\";\n\n  constructor(\n    private client: OPSQLiteConnection,\n    query: Query,\n    private logger: Logger,\n    private fields: SelectedFieldsOrdered | undefined,\n    executeMethod: SQLiteExecuteMethod,\n    private _isResponseInArrayMode: boolean,\n    private customResultMapper?: (rows: unknown[][]) => unknown\n  ) {\n    super(\"sync\", executeMethod, query);\n  }\n\n  run(placeholderValues?: Record<string, unknown>): Promise<QueryResult> {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n\n    return this.client.executeAsync(this.query.sql, params);\n  }\n\n  async all(placeholderValues?: Record<string, unknown>): Promise<T[\"all\"]> {\n    const {\n      fields,\n      joinsNotNullableMap,\n      query,\n      logger,\n      customResultMapper,\n      client,\n    } = this;\n    if (!fields && !customResultMapper) {\n      const params = fillPlaceholders(query.params, placeholderValues ?? {});\n      logger.logQuery(query.sql, params);\n\n      return client.execute(query.sql, params).rows?._array || [];\n    }\n\n    const rows = (await this.values(placeholderValues)) as unknown[][];\n    if (customResultMapper) {\n      return customResultMapper(rows) as T[\"all\"];\n    }\n    return rows.map((row) => mapResultRow(fields!, row, joinsNotNullableMap));\n  }\n\n  async get(placeholderValues?: Record<string, unknown>): Promise<T[\"get\"]> {\n    const {\n      fields,\n      joinsNotNullableMap,\n      customResultMapper,\n      query,\n      logger,\n      client,\n    } = this;\n    const params = fillPlaceholders(query.params, placeholderValues ?? {});\n    logger.logQuery(query.sql, params);\n    if (!fields && !customResultMapper) {\n      const rows = client.execute(query.sql, params).rows?._array || [];\n      return rows[0];\n    }\n\n    const rows = (await this.values(placeholderValues)) as unknown[][];\n    const row = rows[0];\n\n    if (!row) {\n      return undefined;\n    }\n\n    if (customResultMapper) {\n      return customResultMapper(rows) as T[\"get\"];\n    }\n\n    return mapResultRow(fields!, row, joinsNotNullableMap);\n  }\n\n  values(placeholderValues?: Record<string, unknown>): Promise<T[\"values\"]> {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n    return this.client.executeRawAsync(this.query.sql, params);\n  }\n\n  /** @internal */\n  isResponseInArrayMode(): boolean {\n    return this._isResponseInArrayMode;\n  }\n}\n"],"mappings":"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","names":["rows"]}
\ No newline at end of file
diff --git a/op-sqlite/session.d.cts b/op-sqlite/session.d.cts
index a0429e5e06e85a0f1ab77c2fddf1cb1f8ae9dfd8..ccfed7a3c61cd1457b5baf8134ad1a99b97d75d2 100644
--- a/op-sqlite/session.d.cts
+++ b/op-sqlite/session.d.cts
@@ -1,4 +1,4 @@
-import type { OPSQLiteConnection, QueryResult } from '@op-engineering/op-sqlite';
+import type { OPSQLiteConnection, QueryResult } from "@op-engineering/op-sqlite";
 import { entityKind } from "../entity.cjs";
 import type { Logger } from "../logger.cjs";
 import type { RelationalSchemaConfig, TablesRelationalConfig } from "../relations.cjs";
@@ -10,27 +10,27 @@ import { type PreparedQueryConfig as PreparedQueryConfigBase, type SQLiteExecute
 export interface OPSQLiteSessionOptions {
     logger?: Logger;
 }
-type PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;
-export declare class OPSQLiteSession<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends SQLiteSession<'async', QueryResult, TFullSchema, TSchema> {
+type PreparedQueryConfig = Omit<PreparedQueryConfigBase, "statement" | "run">;
+export declare class OPSQLiteSession<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends SQLiteSession<"async", QueryResult, TFullSchema, TSchema> {
     private client;
     private schema;
     static readonly [entityKind]: string;
     private logger;
     constructor(client: OPSQLiteConnection, dialect: SQLiteAsyncDialect, schema: RelationalSchemaConfig<TSchema> | undefined, options?: OPSQLiteSessionOptions);
-    prepareQuery<T extends Omit<PreparedQueryConfig, 'run'>>(query: Query, fields: SelectedFieldsOrdered | undefined, executeMethod: SQLiteExecuteMethod, isResponseInArrayMode: boolean, customResultMapper?: (rows: unknown[][]) => unknown): OPSQLitePreparedQuery<T>;
-    transaction<T>(transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T, config?: SQLiteTransactionConfig): T;
+    prepareQuery<T extends Omit<PreparedQueryConfig, "run">>(query: Query, fields: SelectedFieldsOrdered | undefined, executeMethod: SQLiteExecuteMethod, isResponseInArrayMode: boolean, customResultMapper?: (rows: unknown[][]) => unknown): OPSQLitePreparedQuery<T>;
+    transaction<T>(transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T | Promise<T>, _config?: SQLiteTransactionConfig): Promise<T>;
 }
-export declare class OPSQLiteTransaction<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends SQLiteTransaction<'async', QueryResult, TFullSchema, TSchema> {
+export declare class OPSQLiteTransaction<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends SQLiteTransaction<"async", QueryResult, TFullSchema, TSchema> {
     static readonly [entityKind]: string;
-    transaction<T>(transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T): T;
+    transaction<T>(_transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T): T;
 }
 export declare class OPSQLitePreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<{
-    type: 'async';
+    type: "async";
     run: QueryResult;
-    all: T['all'];
-    get: T['get'];
-    values: T['values'];
-    execute: T['execute'];
+    all: T["all"];
+    get: T["get"];
+    values: T["values"];
+    execute: T["execute"];
 }> {
     private client;
     private logger;
@@ -40,8 +40,8 @@ export declare class OPSQLitePreparedQuery<T extends PreparedQueryConfig = Prepa
     static readonly [entityKind]: string;
     constructor(client: OPSQLiteConnection, query: Query, logger: Logger, fields: SelectedFieldsOrdered | undefined, executeMethod: SQLiteExecuteMethod, _isResponseInArrayMode: boolean, customResultMapper?: ((rows: unknown[][]) => unknown) | undefined);
     run(placeholderValues?: Record<string, unknown>): Promise<QueryResult>;
-    all(placeholderValues?: Record<string, unknown>): Promise<T['all']>;
-    get(placeholderValues?: Record<string, unknown>): Promise<T['get']>;
-    values(placeholderValues?: Record<string, unknown>): Promise<T['values']>;
+    all(placeholderValues?: Record<string, unknown>): Promise<T["all"]>;
+    get(placeholderValues?: Record<string, unknown>): Promise<T["get"]>;
+    values(placeholderValues?: Record<string, unknown>): Promise<T["values"]>;
 }
 export {};
diff --git a/op-sqlite/session.d.ts b/op-sqlite/session.d.ts
index 07cae6b6cb6c0c1a11d283ae26aad1c1c1d7cd4d..021c904e0b9d22fad58853669c341b51818b4738 100644
--- a/op-sqlite/session.d.ts
+++ b/op-sqlite/session.d.ts
@@ -1,4 +1,4 @@
-import type { OPSQLiteConnection, QueryResult } from '@op-engineering/op-sqlite';
+import type { OPSQLiteConnection, QueryResult } from "@op-engineering/op-sqlite";
 import { entityKind } from "../entity.js";
 import type { Logger } from "../logger.js";
 import type { RelationalSchemaConfig, TablesRelationalConfig } from "../relations.js";
@@ -10,27 +10,27 @@ import { type PreparedQueryConfig as PreparedQueryConfigBase, type SQLiteExecute
 export interface OPSQLiteSessionOptions {
     logger?: Logger;
 }
-type PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;
-export declare class OPSQLiteSession<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends SQLiteSession<'async', QueryResult, TFullSchema, TSchema> {
+type PreparedQueryConfig = Omit<PreparedQueryConfigBase, "statement" | "run">;
+export declare class OPSQLiteSession<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends SQLiteSession<"async", QueryResult, TFullSchema, TSchema> {
     private client;
     private schema;
     static readonly [entityKind]: string;
     private logger;
     constructor(client: OPSQLiteConnection, dialect: SQLiteAsyncDialect, schema: RelationalSchemaConfig<TSchema> | undefined, options?: OPSQLiteSessionOptions);
-    prepareQuery<T extends Omit<PreparedQueryConfig, 'run'>>(query: Query, fields: SelectedFieldsOrdered | undefined, executeMethod: SQLiteExecuteMethod, isResponseInArrayMode: boolean, customResultMapper?: (rows: unknown[][]) => unknown): OPSQLitePreparedQuery<T>;
-    transaction<T>(transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T, config?: SQLiteTransactionConfig): T;
+    prepareQuery<T extends Omit<PreparedQueryConfig, "run">>(query: Query, fields: SelectedFieldsOrdered | undefined, executeMethod: SQLiteExecuteMethod, isResponseInArrayMode: boolean, customResultMapper?: (rows: unknown[][]) => unknown): OPSQLitePreparedQuery<T>;
+    transaction<T>(transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T | Promise<T>, _config?: SQLiteTransactionConfig): Promise<T>;
 }
-export declare class OPSQLiteTransaction<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends SQLiteTransaction<'async', QueryResult, TFullSchema, TSchema> {
+export declare class OPSQLiteTransaction<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends SQLiteTransaction<"async", QueryResult, TFullSchema, TSchema> {
     static readonly [entityKind]: string;
-    transaction<T>(transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T): T;
+    transaction<T>(_transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T): T;
 }
 export declare class OPSQLitePreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<{
-    type: 'async';
+    type: "async";
     run: QueryResult;
-    all: T['all'];
-    get: T['get'];
-    values: T['values'];
-    execute: T['execute'];
+    all: T["all"];
+    get: T["get"];
+    values: T["values"];
+    execute: T["execute"];
 }> {
     private client;
     private logger;
@@ -40,8 +40,8 @@ export declare class OPSQLitePreparedQuery<T extends PreparedQueryConfig = Prepa
     static readonly [entityKind]: string;
     constructor(client: OPSQLiteConnection, query: Query, logger: Logger, fields: SelectedFieldsOrdered | undefined, executeMethod: SQLiteExecuteMethod, _isResponseInArrayMode: boolean, customResultMapper?: ((rows: unknown[][]) => unknown) | undefined);
     run(placeholderValues?: Record<string, unknown>): Promise<QueryResult>;
-    all(placeholderValues?: Record<string, unknown>): Promise<T['all']>;
-    get(placeholderValues?: Record<string, unknown>): Promise<T['get']>;
-    values(placeholderValues?: Record<string, unknown>): Promise<T['values']>;
+    all(placeholderValues?: Record<string, unknown>): Promise<T["all"]>;
+    get(placeholderValues?: Record<string, unknown>): Promise<T["get"]>;
+    values(placeholderValues?: Record<string, unknown>): Promise<T["values"]>;
 }
 export {};
diff --git a/op-sqlite/session.js b/op-sqlite/session.js
index ff84604e7998182ef78fbffc8d20019aaf76755e..454f154677b6761798419b9196b1ba5674cbb5c6 100644
--- a/op-sqlite/session.js
+++ b/op-sqlite/session.js
@@ -1,6 +1,6 @@
 import { entityKind } from "../entity.js";
 import { NoopLogger } from "../logger.js";
-import { fillPlaceholders, sql } from "../sql/sql.js";
+import { fillPlaceholders } from "../sql/sql.js";
 import { SQLiteTransaction } from "../sqlite-core/index.js";
 import {
   SQLitePreparedQuery,
@@ -27,33 +27,30 @@ class OPSQLiteSession extends SQLiteSession {
       customResultMapper
     );
   }
-  transaction(transaction, config = {}) {
-    const tx = new OPSQLiteTransaction("async", this.dialect, this, this.schema);
-    this.run(sql.raw(`begin${config?.behavior ? " " + config.behavior : ""}`));
-    try {
-      const result = transaction(tx);
-      this.run(sql`commit`);
-      return result;
-    } catch (err) {
-      this.run(sql`rollback`);
-      throw err;
-    }
+  transaction(transaction, _config) {
+    return new Promise((resolve, reject) => {
+      this.client.transaction(async () => {
+        const tx = new OPSQLiteTransaction(
+          "async",
+          this.dialect,
+          this,
+          this.schema
+        );
+        try {
+          resolve(await transaction(tx));
+        } catch (e) {
+          reject(e);
+        }
+      });
+    });
   }
 }
 class OPSQLiteTransaction extends SQLiteTransaction {
   static [entityKind] = "OPSQLiteTransaction";
-  transaction(transaction) {
-    const savepointName = `sp${this.nestedIndex}`;
-    const tx = new OPSQLiteTransaction("async", this.dialect, this.session, this.schema, this.nestedIndex + 1);
-    this.session.run(sql.raw(`savepoint ${savepointName}`));
-    try {
-      const result = transaction(tx);
-      this.session.run(sql.raw(`release savepoint ${savepointName}`));
-      return result;
-    } catch (err) {
-      this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));
-      throw err;
-    }
+  transaction(_transaction) {
+    throw new Error(
+      "nested transactions not implemented for op-sqlite, sorry!"
+    );
   }
 }
 class OPSQLitePreparedQuery extends SQLitePreparedQuery {
@@ -72,7 +69,14 @@ class OPSQLitePreparedQuery extends SQLitePreparedQuery {
     return this.client.executeAsync(this.query.sql, params);
   }
   async all(placeholderValues) {
-    const { fields, joinsNotNullableMap, query, logger, customResultMapper, client } = this;
+    const {
+      fields,
+      joinsNotNullableMap,
+      query,
+      logger,
+      customResultMapper,
+      client
+    } = this;
     if (!fields && !customResultMapper) {
       const params = fillPlaceholders(query.params, placeholderValues ?? {});
       logger.logQuery(query.sql, params);
@@ -85,7 +89,14 @@ class OPSQLitePreparedQuery extends SQLitePreparedQuery {
     return rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));
   }
   async get(placeholderValues) {
-    const { fields, joinsNotNullableMap, customResultMapper, query, logger, client } = this;
+    const {
+      fields,
+      joinsNotNullableMap,
+      customResultMapper,
+      query,
+      logger,
+      client
+    } = this;
     const params = fillPlaceholders(query.params, placeholderValues ?? {});
     logger.logQuery(query.sql, params);
     if (!fields && !customResultMapper) {
diff --git a/op-sqlite/session.js.map b/op-sqlite/session.js.map
index e9d9ca06b6bed8fa265438fc41fe35e20723f61a..ebfae284accc68b35aae9d8dc8e61fdbe07f8f15 100644
--- a/op-sqlite/session.js.map
+++ b/op-sqlite/session.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/op-sqlite/session.ts"],"sourcesContent":["import type { OPSQLiteConnection, QueryResult } from '@op-engineering/op-sqlite';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { NoopLogger } from '~/logger.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { fillPlaceholders, type Query, sql } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport { SQLiteTransaction } from '~/sqlite-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/sqlite-core/query-builders/select.types.ts';\nimport {\n\ttype PreparedQueryConfig as PreparedQueryConfigBase,\n\ttype SQLiteExecuteMethod,\n\tSQLitePreparedQuery,\n\tSQLiteSession,\n\ttype SQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport { mapResultRow } from '~/utils.ts';\n\nexport interface OPSQLiteSessionOptions {\n\tlogger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;\n\nexport class OPSQLiteSession<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteSession<'async', QueryResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'OPSQLiteSession';\n\n\tprivate logger: Logger;\n\n\tconstructor(\n\t\tprivate client: OPSQLiteConnection,\n\t\tdialect: SQLiteAsyncDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\toptions: OPSQLiteSessionOptions = {},\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t}\n\n\tprepareQuery<T extends Omit<PreparedQueryConfig, 'run'>>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t): OPSQLitePreparedQuery<T> {\n\t\treturn new OPSQLitePreparedQuery(\n\t\t\tthis.client,\n\t\t\tquery,\n\t\t\tthis.logger,\n\t\t\tfields,\n\t\t\texecuteMethod,\n\t\t\tisResponseInArrayMode,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\toverride transaction<T>(\n\t\ttransaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T,\n\t\tconfig: SQLiteTransactionConfig = {},\n\t): T {\n\t\tconst tx = new OPSQLiteTransaction('async', this.dialect, this, this.schema);\n\t\tthis.run(sql.raw(`begin${config?.behavior ? ' ' + config.behavior : ''}`));\n\t\ttry {\n\t\t\tconst result = transaction(tx);\n\t\t\tthis.run(sql`commit`);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthis.run(sql`rollback`);\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class OPSQLiteTransaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<'async', QueryResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'OPSQLiteTransaction';\n\n\toverride transaction<T>(transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T): T {\n\t\tconst savepointName = `sp${this.nestedIndex}`;\n\t\tconst tx = new OPSQLiteTransaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);\n\t\tthis.session.run(sql.raw(`savepoint ${savepointName}`));\n\t\ttry {\n\t\t\tconst result = transaction(tx);\n\t\t\tthis.session.run(sql.raw(`release savepoint ${savepointName}`));\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthis.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class OPSQLitePreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<\n\t{ type: 'async'; run: QueryResult; all: T['all']; get: T['get']; values: T['values']; execute: T['execute'] }\n> {\n\tstatic override readonly [entityKind]: string = 'OPSQLitePreparedQuery';\n\n\tconstructor(\n\t\tprivate client: OPSQLiteConnection,\n\t\tquery: Query,\n\t\tprivate logger: Logger,\n\t\tprivate fields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tprivate _isResponseInArrayMode: boolean,\n\t\tprivate customResultMapper?: (rows: unknown[][]) => unknown,\n\t) {\n\t\tsuper('sync', executeMethod, query);\n\t}\n\n\trun(placeholderValues?: Record<string, unknown>): Promise<QueryResult> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\n\t\treturn this.client.executeAsync(this.query.sql, params);\n\t}\n\n\tasync all(placeholderValues?: Record<string, unknown>): Promise<T['all']> {\n\t\tconst { fields, joinsNotNullableMap, query, logger, customResultMapper, client } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\n\t\t\treturn client.execute(query.sql, params).rows?._array || [];\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues) as unknown[][];\n\t\tif (customResultMapper) {\n\t\t\treturn customResultMapper(rows) as T['all'];\n\t\t}\n\t\treturn rows.map((row) => mapResultRow(fields!, row, joinsNotNullableMap));\n\t}\n\n\tasync get(placeholderValues?: Record<string, unknown>): Promise<T['get']> {\n\t\tconst { fields, joinsNotNullableMap, customResultMapper, query, logger, client } = this;\n\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\tlogger.logQuery(query.sql, params);\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst rows = client.execute(query.sql, params).rows?._array || [];\n\t\t\treturn rows[0];\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues) as unknown[][];\n\t\tconst row = rows[0];\n\n\t\tif (!row) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (customResultMapper) {\n\t\t\treturn customResultMapper(rows) as T['get'];\n\t\t}\n\n\t\treturn mapResultRow(fields!, row, joinsNotNullableMap);\n\t}\n\n\tvalues(placeholderValues?: Record<string, unknown>): Promise<T['values']> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\treturn this.client.executeRawAsync(this.query.sql, params);\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn this._isResponseInArrayMode;\n\t}\n}\n"],"mappings":"AACA,SAAS,kBAAkB;AAE3B,SAAS,kBAAkB;AAE3B,SAAS,kBAA8B,WAAW;AAElD,SAAS,yBAAyB;AAElC;AAAA,EAGC;AAAA,EACA;AAAA,OAEM;AACP,SAAS,oBAAoB;AAQtB,MAAM,wBAGH,cAA0D;AAAA,EAKnE,YACS,QACR,SACQ,QACR,UAAkC,CAAC,GAClC;AACD,UAAM,OAAO;AALL;AAEA;AAIR,SAAK,SAAS,QAAQ,UAAU,IAAI,WAAW;AAAA,EAChD;AAAA,EAZA,QAA0B,UAAU,IAAY;AAAA,EAExC;AAAA,EAYR,aACC,OACA,QACA,eACA,uBACA,oBAC2B;AAC3B,WAAO,IAAI;AAAA,MACV,KAAK;AAAA,MACL;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAES,YACR,aACA,SAAkC,CAAC,GAC/B;AACJ,UAAM,KAAK,IAAI,oBAAoB,SAAS,KAAK,SAAS,MAAM,KAAK,MAAM;AAC3E,SAAK,IAAI,IAAI,IAAI,QAAQ,QAAQ,WAAW,MAAM,OAAO,WAAW,EAAE,EAAE,CAAC;AACzE,QAAI;AACH,YAAM,SAAS,YAAY,EAAE;AAC7B,WAAK,IAAI,WAAW;AACpB,aAAO;AAAA,IACR,SAAS,KAAK;AACb,WAAK,IAAI,aAAa;AACtB,YAAM;AAAA,IACP;AAAA,EACD;AACD;AAEO,MAAM,4BAGH,kBAA8D;AAAA,EACvE,QAA0B,UAAU,IAAY;AAAA,EAEvC,YAAe,aAAsE;AAC7F,UAAM,gBAAgB,KAAK,KAAK,WAAW;AAC3C,UAAM,KAAK,IAAI,oBAAoB,SAAS,KAAK,SAAS,KAAK,SAAS,KAAK,QAAQ,KAAK,cAAc,CAAC;AACzG,SAAK,QAAQ,IAAI,IAAI,IAAI,aAAa,aAAa,EAAE,CAAC;AACtD,QAAI;AACH,YAAM,SAAS,YAAY,EAAE;AAC7B,WAAK,QAAQ,IAAI,IAAI,IAAI,qBAAqB,aAAa,EAAE,CAAC;AAC9D,aAAO;AAAA,IACR,SAAS,KAAK;AACb,WAAK,QAAQ,IAAI,IAAI,IAAI,yBAAyB,aAAa,EAAE,CAAC;AAClE,YAAM;AAAA,IACP;AAAA,EACD;AACD;AAEO,MAAM,8BAAmF,oBAE9F;AAAA,EAGD,YACS,QACR,OACQ,QACA,QACR,eACQ,wBACA,oBACP;AACD,UAAM,QAAQ,eAAe,KAAK;AAR1B;AAEA;AACA;AAEA;AACA;AAAA,EAGT;AAAA,EAZA,QAA0B,UAAU,IAAY;AAAA,EAchD,IAAI,mBAAmE;AACtE,UAAM,SAAS,iBAAiB,KAAK,MAAM,QAAQ,qBAAqB,CAAC,CAAC;AAC1E,SAAK,OAAO,SAAS,KAAK,MAAM,KAAK,MAAM;AAE3C,WAAO,KAAK,OAAO,aAAa,KAAK,MAAM,KAAK,MAAM;AAAA,EACvD;AAAA,EAEA,MAAM,IAAI,mBAAgE;AACzE,UAAM,EAAE,QAAQ,qBAAqB,OAAO,QAAQ,oBAAoB,OAAO,IAAI;AACnF,QAAI,CAAC,UAAU,CAAC,oBAAoB;AACnC,YAAM,SAAS,iBAAiB,MAAM,QAAQ,qBAAqB,CAAC,CAAC;AACrE,aAAO,SAAS,MAAM,KAAK,MAAM;AAEjC,aAAO,OAAO,QAAQ,MAAM,KAAK,MAAM,EAAE,MAAM,UAAU,CAAC;AAAA,IAC3D;AAEA,UAAM,OAAO,MAAM,KAAK,OAAO,iBAAiB;AAChD,QAAI,oBAAoB;AACvB,aAAO,mBAAmB,IAAI;AAAA,IAC/B;AACA,WAAO,KAAK,IAAI,CAAC,QAAQ,aAAa,QAAS,KAAK,mBAAmB,CAAC;AAAA,EACzE;AAAA,EAEA,MAAM,IAAI,mBAAgE;AACzE,UAAM,EAAE,QAAQ,qBAAqB,oBAAoB,OAAO,QAAQ,OAAO,IAAI;AACnF,UAAM,SAAS,iBAAiB,MAAM,QAAQ,qBAAqB,CAAC,CAAC;AACrE,WAAO,SAAS,MAAM,KAAK,MAAM;AACjC,QAAI,CAAC,UAAU,CAAC,oBAAoB;AACnC,YAAMA,QAAO,OAAO,QAAQ,MAAM,KAAK,MAAM,EAAE,MAAM,UAAU,CAAC;AAChE,aAAOA,MAAK,CAAC;AAAA,IACd;AAEA,UAAM,OAAO,MAAM,KAAK,OAAO,iBAAiB;AAChD,UAAM,MAAM,KAAK,CAAC;AAElB,QAAI,CAAC,KAAK;AACT,aAAO;AAAA,IACR;AAEA,QAAI,oBAAoB;AACvB,aAAO,mBAAmB,IAAI;AAAA,IAC/B;AAEA,WAAO,aAAa,QAAS,KAAK,mBAAmB;AAAA,EACtD;AAAA,EAEA,OAAO,mBAAmE;AACzE,UAAM,SAAS,iBAAiB,KAAK,MAAM,QAAQ,qBAAqB,CAAC,CAAC;AAC1E,SAAK,OAAO,SAAS,KAAK,MAAM,KAAK,MAAM;AAC3C,WAAO,KAAK,OAAO,gBAAgB,KAAK,MAAM,KAAK,MAAM;AAAA,EAC1D;AAAA;AAAA,EAGA,wBAAiC;AAChC,WAAO,KAAK;AAAA,EACb;AACD;","names":["rows"]}
\ No newline at end of file
+{"version":3,"sources":["../../src/op-sqlite/session.ts"],"sourcesContent":["import type {\n  OPSQLiteConnection,\n  QueryResult,\n} from \"@op-engineering/op-sqlite\";\nimport { entityKind } from \"~/entity.ts\";\nimport type { Logger } from \"~/logger.ts\";\nimport { NoopLogger } from \"~/logger.ts\";\nimport type {\n  RelationalSchemaConfig,\n  TablesRelationalConfig,\n} from \"~/relations.ts\";\nimport { fillPlaceholders, type Query } from \"~/sql/sql.ts\";\nimport type { SQLiteAsyncDialect } from \"~/sqlite-core/dialect.ts\";\nimport { SQLiteTransaction } from \"~/sqlite-core/index.ts\";\nimport type { SelectedFieldsOrdered } from \"~/sqlite-core/query-builders/select.types.ts\";\nimport {\n  type PreparedQueryConfig as PreparedQueryConfigBase,\n  type SQLiteExecuteMethod,\n  SQLitePreparedQuery,\n  SQLiteSession,\n  type SQLiteTransactionConfig,\n} from \"~/sqlite-core/session.ts\";\nimport { mapResultRow } from \"~/utils.ts\";\n\nexport interface OPSQLiteSessionOptions {\n  logger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, \"statement\" | \"run\">;\n\nexport class OPSQLiteSession<\n  TFullSchema extends Record<string, unknown>,\n  TSchema extends TablesRelationalConfig,\n> extends SQLiteSession<\"async\", QueryResult, TFullSchema, TSchema> {\n  static override readonly [entityKind]: string = \"OPSQLiteSession\";\n\n  private logger: Logger;\n\n  constructor(\n    private client: OPSQLiteConnection,\n    dialect: SQLiteAsyncDialect,\n    private schema: RelationalSchemaConfig<TSchema> | undefined,\n    options: OPSQLiteSessionOptions = {}\n  ) {\n    super(dialect);\n    this.logger = options.logger ?? new NoopLogger();\n  }\n\n  prepareQuery<T extends Omit<PreparedQueryConfig, \"run\">>(\n    query: Query,\n    fields: SelectedFieldsOrdered | undefined,\n    executeMethod: SQLiteExecuteMethod,\n    isResponseInArrayMode: boolean,\n    customResultMapper?: (rows: unknown[][]) => unknown\n  ): OPSQLitePreparedQuery<T> {\n    return new OPSQLitePreparedQuery(\n      this.client,\n      query,\n      this.logger,\n      fields,\n      executeMethod,\n      isResponseInArrayMode,\n      customResultMapper\n    );\n  }\n  override transaction<T>(\n    transaction: (\n      tx: OPSQLiteTransaction<TFullSchema, TSchema>\n    ) => T | Promise<T>,\n    _config?: SQLiteTransactionConfig\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.client.transaction(async () => {\n        const tx = new OPSQLiteTransaction(\n          \"async\",\n          this.dialect,\n          this,\n          this.schema\n        );\n        try {\n          resolve(await transaction(tx));\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n}\n\nexport class OPSQLiteTransaction<\n  TFullSchema extends Record<string, unknown>,\n  TSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<\"async\", QueryResult, TFullSchema, TSchema> {\n  static override readonly [entityKind]: string = \"OPSQLiteTransaction\";\n\n  override transaction<T>(\n    _transaction: (tx: OPSQLiteTransaction<TFullSchema, TSchema>) => T\n  ): T {\n    throw new Error(\n      \"nested transactions not implemented for op-sqlite, sorry!\"\n    );\n  }\n}\n\nexport class OPSQLitePreparedQuery<\n  T extends PreparedQueryConfig = PreparedQueryConfig,\n> extends SQLitePreparedQuery<{\n  type: \"async\";\n  run: QueryResult;\n  all: T[\"all\"];\n  get: T[\"get\"];\n  values: T[\"values\"];\n  execute: T[\"execute\"];\n}> {\n  static override readonly [entityKind]: string = \"OPSQLitePreparedQuery\";\n\n  constructor(\n    private client: OPSQLiteConnection,\n    query: Query,\n    private logger: Logger,\n    private fields: SelectedFieldsOrdered | undefined,\n    executeMethod: SQLiteExecuteMethod,\n    private _isResponseInArrayMode: boolean,\n    private customResultMapper?: (rows: unknown[][]) => unknown\n  ) {\n    super(\"sync\", executeMethod, query);\n  }\n\n  run(placeholderValues?: Record<string, unknown>): Promise<QueryResult> {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n\n    return this.client.executeAsync(this.query.sql, params);\n  }\n\n  async all(placeholderValues?: Record<string, unknown>): Promise<T[\"all\"]> {\n    const {\n      fields,\n      joinsNotNullableMap,\n      query,\n      logger,\n      customResultMapper,\n      client,\n    } = this;\n    if (!fields && !customResultMapper) {\n      const params = fillPlaceholders(query.params, placeholderValues ?? {});\n      logger.logQuery(query.sql, params);\n\n      return client.execute(query.sql, params).rows?._array || [];\n    }\n\n    const rows = (await this.values(placeholderValues)) as unknown[][];\n    if (customResultMapper) {\n      return customResultMapper(rows) as T[\"all\"];\n    }\n    return rows.map((row) => mapResultRow(fields!, row, joinsNotNullableMap));\n  }\n\n  async get(placeholderValues?: Record<string, unknown>): Promise<T[\"get\"]> {\n    const {\n      fields,\n      joinsNotNullableMap,\n      customResultMapper,\n      query,\n      logger,\n      client,\n    } = this;\n    const params = fillPlaceholders(query.params, placeholderValues ?? {});\n    logger.logQuery(query.sql, params);\n    if (!fields && !customResultMapper) {\n      const rows = client.execute(query.sql, params).rows?._array || [];\n      return rows[0];\n    }\n\n    const rows = (await this.values(placeholderValues)) as unknown[][];\n    const row = rows[0];\n\n    if (!row) {\n      return undefined;\n    }\n\n    if (customResultMapper) {\n      return customResultMapper(rows) as T[\"get\"];\n    }\n\n    return mapResultRow(fields!, row, joinsNotNullableMap);\n  }\n\n  values(placeholderValues?: Record<string, unknown>): Promise<T[\"values\"]> {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n    return this.client.executeRawAsync(this.query.sql, params);\n  }\n\n  /** @internal */\n  isResponseInArrayMode(): boolean {\n    return this._isResponseInArrayMode;\n  }\n}\n"],"mappings":"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","names":["rows"]}
\ No newline at end of file
diff --git a/package.json b/package.json
index 3a87d63968c3e4b1ae0c4463ae6f2c9d24c57165..cf187f5be0406d31bdd27c19ebccbee057509d85 100644
--- a/package.json
+++ b/package.json
@@ -516,54 +516,6 @@
       "types": "./view-common.d.ts",
       "default": "./view-common.js"
     },
-    "./bun-sqlite/driver": {
-      "import": {
-        "types": "./bun-sqlite/driver.d.ts",
-        "default": "./bun-sqlite/driver.js"
-      },
-      "require": {
-        "types": "./bun-sqlite/driver.d.cts",
-        "default": "./bun-sqlite/driver.cjs"
-      },
-      "types": "./bun-sqlite/driver.d.ts",
-      "default": "./bun-sqlite/driver.js"
-    },
-    "./bun-sqlite": {
-      "import": {
-        "types": "./bun-sqlite/index.d.ts",
-        "default": "./bun-sqlite/index.js"
-      },
-      "require": {
-        "types": "./bun-sqlite/index.d.cts",
-        "default": "./bun-sqlite/index.cjs"
-      },
-      "types": "./bun-sqlite/index.d.ts",
-      "default": "./bun-sqlite/index.js"
-    },
-    "./bun-sqlite/migrator": {
-      "import": {
-        "types": "./bun-sqlite/migrator.d.ts",
-        "default": "./bun-sqlite/migrator.js"
-      },
-      "require": {
-        "types": "./bun-sqlite/migrator.d.cts",
-        "default": "./bun-sqlite/migrator.cjs"
-      },
-      "types": "./bun-sqlite/migrator.d.ts",
-      "default": "./bun-sqlite/migrator.js"
-    },
-    "./bun-sqlite/session": {
-      "import": {
-        "types": "./bun-sqlite/session.d.ts",
-        "default": "./bun-sqlite/session.js"
-      },
-      "require": {
-        "types": "./bun-sqlite/session.d.cts",
-        "default": "./bun-sqlite/session.cjs"
-      },
-      "types": "./bun-sqlite/session.d.ts",
-      "default": "./bun-sqlite/session.js"
-    },
     "./better-sqlite3/driver": {
       "import": {
         "types": "./better-sqlite3/driver.d.ts",
@@ -612,6 +564,54 @@
       "types": "./better-sqlite3/session.d.ts",
       "default": "./better-sqlite3/session.js"
     },
+    "./bun-sqlite/driver": {
+      "import": {
+        "types": "./bun-sqlite/driver.d.ts",
+        "default": "./bun-sqlite/driver.js"
+      },
+      "require": {
+        "types": "./bun-sqlite/driver.d.cts",
+        "default": "./bun-sqlite/driver.cjs"
+      },
+      "types": "./bun-sqlite/driver.d.ts",
+      "default": "./bun-sqlite/driver.js"
+    },
+    "./bun-sqlite": {
+      "import": {
+        "types": "./bun-sqlite/index.d.ts",
+        "default": "./bun-sqlite/index.js"
+      },
+      "require": {
+        "types": "./bun-sqlite/index.d.cts",
+        "default": "./bun-sqlite/index.cjs"
+      },
+      "types": "./bun-sqlite/index.d.ts",
+      "default": "./bun-sqlite/index.js"
+    },
+    "./bun-sqlite/migrator": {
+      "import": {
+        "types": "./bun-sqlite/migrator.d.ts",
+        "default": "./bun-sqlite/migrator.js"
+      },
+      "require": {
+        "types": "./bun-sqlite/migrator.d.cts",
+        "default": "./bun-sqlite/migrator.cjs"
+      },
+      "types": "./bun-sqlite/migrator.d.ts",
+      "default": "./bun-sqlite/migrator.js"
+    },
+    "./bun-sqlite/session": {
+      "import": {
+        "types": "./bun-sqlite/session.d.ts",
+        "default": "./bun-sqlite/session.js"
+      },
+      "require": {
+        "types": "./bun-sqlite/session.d.cts",
+        "default": "./bun-sqlite/session.cjs"
+      },
+      "types": "./bun-sqlite/session.d.ts",
+      "default": "./bun-sqlite/session.js"
+    },
     "./d1/driver": {
       "import": {
         "types": "./d1/driver.d.ts",
@@ -1284,6 +1284,54 @@
       "types": "./node-postgres/session.d.ts",
       "default": "./node-postgres/session.js"
     },
+    "./pg-proxy/driver": {
+      "import": {
+        "types": "./pg-proxy/driver.d.ts",
+        "default": "./pg-proxy/driver.js"
+      },
+      "require": {
+        "types": "./pg-proxy/driver.d.cts",
+        "default": "./pg-proxy/driver.cjs"
+      },
+      "types": "./pg-proxy/driver.d.ts",
+      "default": "./pg-proxy/driver.js"
+    },
+    "./pg-proxy": {
+      "import": {
+        "types": "./pg-proxy/index.d.ts",
+        "default": "./pg-proxy/index.js"
+      },
+      "require": {
+        "types": "./pg-proxy/index.d.cts",
+        "default": "./pg-proxy/index.cjs"
+      },
+      "types": "./pg-proxy/index.d.ts",
+      "default": "./pg-proxy/index.js"
+    },
+    "./pg-proxy/migrator": {
+      "import": {
+        "types": "./pg-proxy/migrator.d.ts",
+        "default": "./pg-proxy/migrator.js"
+      },
+      "require": {
+        "types": "./pg-proxy/migrator.d.cts",
+        "default": "./pg-proxy/migrator.cjs"
+      },
+      "types": "./pg-proxy/migrator.d.ts",
+      "default": "./pg-proxy/migrator.js"
+    },
+    "./pg-proxy/session": {
+      "import": {
+        "types": "./pg-proxy/session.d.ts",
+        "default": "./pg-proxy/session.js"
+      },
+      "require": {
+        "types": "./pg-proxy/session.d.cts",
+        "default": "./pg-proxy/session.cjs"
+      },
+      "types": "./pg-proxy/session.d.ts",
+      "default": "./pg-proxy/session.js"
+    },
     "./op-sqlite/driver": {
       "import": {
         "types": "./op-sqlite/driver.d.ts",
@@ -1584,54 +1632,6 @@
       "types": "./pg-core/view.d.ts",
       "default": "./pg-core/view.js"
     },
-    "./pg-proxy/driver": {
-      "import": {
-        "types": "./pg-proxy/driver.d.ts",
-        "default": "./pg-proxy/driver.js"
-      },
-      "require": {
-        "types": "./pg-proxy/driver.d.cts",
-        "default": "./pg-proxy/driver.cjs"
-      },
-      "types": "./pg-proxy/driver.d.ts",
-      "default": "./pg-proxy/driver.js"
-    },
-    "./pg-proxy": {
-      "import": {
-        "types": "./pg-proxy/index.d.ts",
-        "default": "./pg-proxy/index.js"
-      },
-      "require": {
-        "types": "./pg-proxy/index.d.cts",
-        "default": "./pg-proxy/index.cjs"
-      },
-      "types": "./pg-proxy/index.d.ts",
-      "default": "./pg-proxy/index.js"
-    },
-    "./pg-proxy/migrator": {
-      "import": {
-        "types": "./pg-proxy/migrator.d.ts",
-        "default": "./pg-proxy/migrator.js"
-      },
-      "require": {
-        "types": "./pg-proxy/migrator.d.cts",
-        "default": "./pg-proxy/migrator.cjs"
-      },
-      "types": "./pg-proxy/migrator.d.ts",
-      "default": "./pg-proxy/migrator.js"
-    },
-    "./pg-proxy/session": {
-      "import": {
-        "types": "./pg-proxy/session.d.ts",
-        "default": "./pg-proxy/session.js"
-      },
-      "require": {
-        "types": "./pg-proxy/session.d.cts",
-        "default": "./pg-proxy/session.cjs"
-      },
-      "types": "./pg-proxy/session.d.ts",
-      "default": "./pg-proxy/session.js"
-    },
     "./pglite/driver": {
       "import": {
         "types": "./pglite/driver.d.ts",
@@ -2868,6 +2868,150 @@
       "types": "./mysql-core/query-builders/update.d.ts",
       "default": "./mysql-core/query-builders/update.js"
     },
+    "./pg-core/utils/array": {
+      "import": {
+        "types": "./pg-core/utils/array.d.ts",
+        "default": "./pg-core/utils/array.js"
+      },
+      "require": {
+        "types": "./pg-core/utils/array.d.cts",
+        "default": "./pg-core/utils/array.cjs"
+      },
+      "types": "./pg-core/utils/array.d.ts",
+      "default": "./pg-core/utils/array.js"
+    },
+    "./pg-core/query-builders/count": {
+      "import": {
+        "types": "./pg-core/query-builders/count.d.ts",
+        "default": "./pg-core/query-builders/count.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/count.d.cts",
+        "default": "./pg-core/query-builders/count.cjs"
+      },
+      "types": "./pg-core/query-builders/count.d.ts",
+      "default": "./pg-core/query-builders/count.js"
+    },
+    "./pg-core/query-builders/delete": {
+      "import": {
+        "types": "./pg-core/query-builders/delete.d.ts",
+        "default": "./pg-core/query-builders/delete.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/delete.d.cts",
+        "default": "./pg-core/query-builders/delete.cjs"
+      },
+      "types": "./pg-core/query-builders/delete.d.ts",
+      "default": "./pg-core/query-builders/delete.js"
+    },
+    "./pg-core/query-builders": {
+      "import": {
+        "types": "./pg-core/query-builders/index.d.ts",
+        "default": "./pg-core/query-builders/index.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/index.d.cts",
+        "default": "./pg-core/query-builders/index.cjs"
+      },
+      "types": "./pg-core/query-builders/index.d.ts",
+      "default": "./pg-core/query-builders/index.js"
+    },
+    "./pg-core/query-builders/insert": {
+      "import": {
+        "types": "./pg-core/query-builders/insert.d.ts",
+        "default": "./pg-core/query-builders/insert.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/insert.d.cts",
+        "default": "./pg-core/query-builders/insert.cjs"
+      },
+      "types": "./pg-core/query-builders/insert.d.ts",
+      "default": "./pg-core/query-builders/insert.js"
+    },
+    "./pg-core/query-builders/query-builder": {
+      "import": {
+        "types": "./pg-core/query-builders/query-builder.d.ts",
+        "default": "./pg-core/query-builders/query-builder.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/query-builder.d.cts",
+        "default": "./pg-core/query-builders/query-builder.cjs"
+      },
+      "types": "./pg-core/query-builders/query-builder.d.ts",
+      "default": "./pg-core/query-builders/query-builder.js"
+    },
+    "./pg-core/query-builders/query": {
+      "import": {
+        "types": "./pg-core/query-builders/query.d.ts",
+        "default": "./pg-core/query-builders/query.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/query.d.cts",
+        "default": "./pg-core/query-builders/query.cjs"
+      },
+      "types": "./pg-core/query-builders/query.d.ts",
+      "default": "./pg-core/query-builders/query.js"
+    },
+    "./pg-core/query-builders/raw": {
+      "import": {
+        "types": "./pg-core/query-builders/raw.d.ts",
+        "default": "./pg-core/query-builders/raw.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/raw.d.cts",
+        "default": "./pg-core/query-builders/raw.cjs"
+      },
+      "types": "./pg-core/query-builders/raw.d.ts",
+      "default": "./pg-core/query-builders/raw.js"
+    },
+    "./pg-core/query-builders/refresh-materialized-view": {
+      "import": {
+        "types": "./pg-core/query-builders/refresh-materialized-view.d.ts",
+        "default": "./pg-core/query-builders/refresh-materialized-view.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/refresh-materialized-view.d.cts",
+        "default": "./pg-core/query-builders/refresh-materialized-view.cjs"
+      },
+      "types": "./pg-core/query-builders/refresh-materialized-view.d.ts",
+      "default": "./pg-core/query-builders/refresh-materialized-view.js"
+    },
+    "./pg-core/query-builders/select": {
+      "import": {
+        "types": "./pg-core/query-builders/select.d.ts",
+        "default": "./pg-core/query-builders/select.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/select.d.cts",
+        "default": "./pg-core/query-builders/select.cjs"
+      },
+      "types": "./pg-core/query-builders/select.d.ts",
+      "default": "./pg-core/query-builders/select.js"
+    },
+    "./pg-core/query-builders/select.types": {
+      "import": {
+        "types": "./pg-core/query-builders/select.types.d.ts",
+        "default": "./pg-core/query-builders/select.types.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/select.types.d.cts",
+        "default": "./pg-core/query-builders/select.types.cjs"
+      },
+      "types": "./pg-core/query-builders/select.types.d.ts",
+      "default": "./pg-core/query-builders/select.types.js"
+    },
+    "./pg-core/query-builders/update": {
+      "import": {
+        "types": "./pg-core/query-builders/update.d.ts",
+        "default": "./pg-core/query-builders/update.js"
+      },
+      "require": {
+        "types": "./pg-core/query-builders/update.d.cts",
+        "default": "./pg-core/query-builders/update.cjs"
+      },
+      "types": "./pg-core/query-builders/update.d.ts",
+      "default": "./pg-core/query-builders/update.js"
+    },
     "./pg-core/columns/all": {
       "import": {
         "types": "./pg-core/columns/all.d.ts",
@@ -3264,150 +3408,6 @@
       "types": "./pg-core/columns/varchar.d.ts",
       "default": "./pg-core/columns/varchar.js"
     },
-    "./pg-core/query-builders/count": {
-      "import": {
-        "types": "./pg-core/query-builders/count.d.ts",
-        "default": "./pg-core/query-builders/count.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/count.d.cts",
-        "default": "./pg-core/query-builders/count.cjs"
-      },
-      "types": "./pg-core/query-builders/count.d.ts",
-      "default": "./pg-core/query-builders/count.js"
-    },
-    "./pg-core/query-builders/delete": {
-      "import": {
-        "types": "./pg-core/query-builders/delete.d.ts",
-        "default": "./pg-core/query-builders/delete.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/delete.d.cts",
-        "default": "./pg-core/query-builders/delete.cjs"
-      },
-      "types": "./pg-core/query-builders/delete.d.ts",
-      "default": "./pg-core/query-builders/delete.js"
-    },
-    "./pg-core/query-builders": {
-      "import": {
-        "types": "./pg-core/query-builders/index.d.ts",
-        "default": "./pg-core/query-builders/index.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/index.d.cts",
-        "default": "./pg-core/query-builders/index.cjs"
-      },
-      "types": "./pg-core/query-builders/index.d.ts",
-      "default": "./pg-core/query-builders/index.js"
-    },
-    "./pg-core/query-builders/insert": {
-      "import": {
-        "types": "./pg-core/query-builders/insert.d.ts",
-        "default": "./pg-core/query-builders/insert.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/insert.d.cts",
-        "default": "./pg-core/query-builders/insert.cjs"
-      },
-      "types": "./pg-core/query-builders/insert.d.ts",
-      "default": "./pg-core/query-builders/insert.js"
-    },
-    "./pg-core/query-builders/query-builder": {
-      "import": {
-        "types": "./pg-core/query-builders/query-builder.d.ts",
-        "default": "./pg-core/query-builders/query-builder.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/query-builder.d.cts",
-        "default": "./pg-core/query-builders/query-builder.cjs"
-      },
-      "types": "./pg-core/query-builders/query-builder.d.ts",
-      "default": "./pg-core/query-builders/query-builder.js"
-    },
-    "./pg-core/query-builders/query": {
-      "import": {
-        "types": "./pg-core/query-builders/query.d.ts",
-        "default": "./pg-core/query-builders/query.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/query.d.cts",
-        "default": "./pg-core/query-builders/query.cjs"
-      },
-      "types": "./pg-core/query-builders/query.d.ts",
-      "default": "./pg-core/query-builders/query.js"
-    },
-    "./pg-core/query-builders/raw": {
-      "import": {
-        "types": "./pg-core/query-builders/raw.d.ts",
-        "default": "./pg-core/query-builders/raw.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/raw.d.cts",
-        "default": "./pg-core/query-builders/raw.cjs"
-      },
-      "types": "./pg-core/query-builders/raw.d.ts",
-      "default": "./pg-core/query-builders/raw.js"
-    },
-    "./pg-core/query-builders/refresh-materialized-view": {
-      "import": {
-        "types": "./pg-core/query-builders/refresh-materialized-view.d.ts",
-        "default": "./pg-core/query-builders/refresh-materialized-view.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/refresh-materialized-view.d.cts",
-        "default": "./pg-core/query-builders/refresh-materialized-view.cjs"
-      },
-      "types": "./pg-core/query-builders/refresh-materialized-view.d.ts",
-      "default": "./pg-core/query-builders/refresh-materialized-view.js"
-    },
-    "./pg-core/query-builders/select": {
-      "import": {
-        "types": "./pg-core/query-builders/select.d.ts",
-        "default": "./pg-core/query-builders/select.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/select.d.cts",
-        "default": "./pg-core/query-builders/select.cjs"
-      },
-      "types": "./pg-core/query-builders/select.d.ts",
-      "default": "./pg-core/query-builders/select.js"
-    },
-    "./pg-core/query-builders/select.types": {
-      "import": {
-        "types": "./pg-core/query-builders/select.types.d.ts",
-        "default": "./pg-core/query-builders/select.types.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/select.types.d.cts",
-        "default": "./pg-core/query-builders/select.types.cjs"
-      },
-      "types": "./pg-core/query-builders/select.types.d.ts",
-      "default": "./pg-core/query-builders/select.types.js"
-    },
-    "./pg-core/query-builders/update": {
-      "import": {
-        "types": "./pg-core/query-builders/update.d.ts",
-        "default": "./pg-core/query-builders/update.js"
-      },
-      "require": {
-        "types": "./pg-core/query-builders/update.d.cts",
-        "default": "./pg-core/query-builders/update.cjs"
-      },
-      "types": "./pg-core/query-builders/update.d.ts",
-      "default": "./pg-core/query-builders/update.js"
-    },
-    "./pg-core/utils/array": {
-      "import": {
-        "types": "./pg-core/utils/array.d.ts",
-        "default": "./pg-core/utils/array.js"
-      },
-      "require": {
-        "types": "./pg-core/utils/array.d.cts",
-        "default": "./pg-core/utils/array.cjs"
-      },
-      "types": "./pg-core/utils/array.d.ts",
-      "default": "./pg-core/utils/array.js"
-    },
     "./prisma/mysql/driver": {
       "import": {
         "types": "./prisma/mysql/driver.d.ts",
