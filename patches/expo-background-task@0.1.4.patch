diff --git a/android/src/main/java/expo/modules/backgroundtask/BackgroundTaskScheduler.kt b/android/src/main/java/expo/modules/backgroundtask/BackgroundTaskScheduler.kt
index dfa2f0849a9cc0e66cf9db70e58ef857bb3009cd..b1b6d27360b0c15d25bdfc14a0e5da8f3e71aea5 100644
--- a/android/src/main/java/expo/modules/backgroundtask/BackgroundTaskScheduler.kt
+++ b/android/src/main/java/expo/modules/backgroundtask/BackgroundTaskScheduler.kt
@@ -25,7 +25,7 @@ import java.util.concurrent.TimeUnit
 
 object BackgroundTaskScheduler {
   // Default interval
-  const val DEFAULT_INTERVAL_MINUTES = 60L * 24L // Once every day
+  const val DEFAULT_INTERVAL_MINUTES = 20L; // 20 min
 
   // Unique identifier (generated by us) to identify the worker
   private const val WORKER_IDENTIFIER = "EXPO_BACKGROUND_WORKER"
diff --git a/ios/BackgroundTaskAppDelegate.swift b/ios/BackgroundTaskAppDelegate.swift
index b97f9180f77c4c16d828667530c5494f1fe3fb00..53ab87e7e302c450f4aa740aa5404dcd42b2022d 100644
--- a/ios/BackgroundTaskAppDelegate.swift
+++ b/ios/BackgroundTaskAppDelegate.swift
@@ -14,6 +14,16 @@ public class BackgroundTaskAppDelegateSubscriber: ExpoAppDelegateSubscriber {
         task.expirationHandler = { ()
           log.warn("Expo Background Tasks - task expired")
           task.setTaskCompleted(success: false)
+
+          // Reschedule
+          Task {
+            do {
+              log.debug("Background task successfully finished. Rescheduling")
+              try await BackgroundTaskScheduler.tryScheduleWorker()
+            } catch {
+              log.error("Could not reschedule the worker after task finished: \(error.localizedDescription)")
+            }
+          }
         }
 
         // Let's find the task service implementation and call the runTasks(withReason)
diff --git a/ios/BackgroundTaskModule.swift b/ios/BackgroundTaskModule.swift
index 6e619ddac321235838ee255d9d453e4119a7c0dd..46f5da9c51bc21ad56f5972bef9b64300d0ebd05 100644
--- a/ios/BackgroundTaskModule.swift
+++ b/ios/BackgroundTaskModule.swift
@@ -12,11 +12,7 @@ public class BackgroundTaskModule: Module {
     }
 
     AsyncFunction("triggerTaskWorkerForTestingAsync") {
-      if await BackgroundTaskScheduler.isWorkerRunning() {
-        BackgroundTaskDebugHelper.triggerBackgroundTaskTest()
-        return true
-      }
-      return false
+      BackgroundTaskDebugHelper.triggerBackgroundTaskTest()
     }
 
     AsyncFunction("registerTaskAsync") { (name: String, options: [String: Any]) in
@@ -28,7 +24,7 @@ public class BackgroundTaskModule: Module {
         throw BackgroundTasksRestricted()
       }
 
-      if !taskManager.hasBackgroundModeEnabled("processing") {
+      if !taskManager.hasBackgroundModeEnabled("fetch") {
         throw BackgroundTasksNotConfigured()
       }
 
@@ -45,7 +41,7 @@ public class BackgroundTaskModule: Module {
         throw BackgroundTasksRestricted()
       }
 
-      if !taskManager.hasBackgroundModeEnabled("processing") {
+      if !taskManager.hasBackgroundModeEnabled("fetch") {
         throw BackgroundTasksNotConfigured()
       }
 
@@ -61,7 +57,9 @@ public class BackgroundTaskModule: Module {
       Task {
         // Try start worker when app enters background
         do {
+          print("tlonDebug: app backgrounded, trying to reschedule task")
           try await BackgroundTaskScheduler.tryScheduleWorker()
+          print("tlonDebug: app backgrounded, rescheduled bg task")
         } catch {
           log.error("Could not schedule the worker: \(error.localizedDescription)")
         }
@@ -69,10 +67,11 @@ public class BackgroundTaskModule: Module {
     }
 
     OnAppEntersForeground {
-      Task {
-        // When entering foreground we'll stop the worker
-        await BackgroundTaskScheduler.stopWorker()
-      }
+      // Task {
+      //   // When entering foreground we'll stop the worker
+      //   await BackgroundTaskScheduler.stopWorker()
+      //   print("tlonDebug: app foregrounded, canceling scheduled tasks")
+      // }
     }
   }
 }
diff --git a/ios/BackgroundTaskScheduler.swift b/ios/BackgroundTaskScheduler.swift
index 20e3e590008cf187f00ce069e4f06f70e246a546..fd0bafed891d970670fc856fcb128caa04945b79 100644
--- a/ios/BackgroundTaskScheduler.swift
+++ b/ios/BackgroundTaskScheduler.swift
@@ -10,8 +10,9 @@ public class BackgroundTaskScheduler {
   /**
    * Interval for task scheduler. The iOS BGTaskScheduler does not guarantee that the number of minutes will be
    * exact, but it indicates when we'd like the task to start. This will be set to at least 12 hours
+   * PATCH: 15 minutes
    */
-  private static var intervalSeconds: TimeInterval = 12 * 60 * 60
+  private static var intervalSeconds: TimeInterval = 15 * 60
 
   /**
    * Call when a task is registered to keep track of how many background task consumers we have
@@ -21,6 +22,14 @@ public class BackgroundTaskScheduler {
       intervalSeconds = Double(minutes) * 60
     }
     numberOfRegisteredTasksOfThisType += 1
+
+    print("tlonDebug: did register, count is now \(numberOfRegisteredTasksOfThisType)")
+
+    if numberOfRegisteredTasksOfThisType == 1 {
+      Task {
+        try await tryScheduleWorker()
+      }
+    }
   }
 
   /**
@@ -28,6 +37,7 @@ public class BackgroundTaskScheduler {
    */
   public static func didUnregisterTask() {
     numberOfRegisteredTasksOfThisType -= 1
+    print("tlonDebug: did unregister, count is now \(numberOfRegisteredTasksOfThisType)")
   }
 
   /**
@@ -43,17 +53,15 @@ public class BackgroundTaskScheduler {
     await stopWorker()
 
     // Create request
-    let request = BGProcessingTaskRequest(identifier: BackgroundTaskConstants.BackgroundWorkerIdentifier)
-
-    // We'll require network but accept running on battery power.
-    request.requiresNetworkConnectivity = true
-    request.requiresExternalPower = false
+    let request = BGAppRefreshTaskRequest(identifier: BackgroundTaskConstants.BackgroundWorkerIdentifier)
 
     // Set up mimimum start date
-    request.earliestBeginDate = Date().addingTimeInterval(intervalSeconds)
+    // request.earliestBeginDate = Date().addingTimeInterval(intervalSeconds)
+    request.earliestBeginDate = nil
 
     do {
       try BGTaskScheduler.shared.submit(request)
+        print("tlonDebug: submitted task request")
     } catch let error as BGTaskScheduler.Error {
       switch error.code {
       case .unavailable:
@@ -77,6 +85,7 @@ public class BackgroundTaskScheduler {
    */
   public static func stopWorker() async {
     BGTaskScheduler.shared.cancel(taskRequestWithIdentifier: BackgroundTaskConstants.BackgroundWorkerIdentifier)
+    print("tlonDebug: canceled task request")
   }
 
   /**
@@ -84,7 +93,9 @@ public class BackgroundTaskScheduler {
    */
   public static func isWorkerRunning() async -> Bool {
     let requests = await BGTaskScheduler.shared.pendingTaskRequests()
-    return requests.contains(where: { $0.identifier == BackgroundTaskConstants.BackgroundWorkerIdentifier })
+    let isRunning = requests.contains(where: { $0.identifier == BackgroundTaskConstants.BackgroundWorkerIdentifier })
+    print("tlonDebug: checked is worker running? \(isRunning)")
+    return isRunning
   }
 
   /**
diff --git a/src/BackgroundTask.ts b/src/BackgroundTask.ts
index d4ee89084d233740d59a30886fea842d3f5e3e25..18a934722ce1b93b36e4b29116f3225ca8f77c01 100644
--- a/src/BackgroundTask.ts
+++ b/src/BackgroundTask.ts
@@ -103,17 +103,17 @@ export async function unregisterTaskAsync(taskName: string): Promise<void> {
  * @todo(chrfalch): When we have a usable devtools plugin we can enable this function.
  * @returns A promise which fulfils when the task is triggered.
  */
-// export async function triggerTaskWorkerForTestingAsync(): Promise<boolean> {
-//   if (__DEV__) {
-//     if (!ExpoBackgroundTaskModule.triggerTaskWorkerForTestingAsync) {
-//       throw new UnavailabilityError('BackgroundTask', 'triggerTaskWorkerForTestingAsync');
-//     }
-//     console.log('Calling triggerTaskWorkerForTestingAsync');
-//     return await ExpoBackgroundTaskModule.triggerTaskWorkerForTestingAsync();
-//   } else {
-//     return Promise.resolve(false);
-//   }
-// }
+export async function triggerTaskWorkerForTestingAsync(): Promise<boolean> {
+  if (__DEV__) {
+    if (!ExpoBackgroundTaskModule.triggerTaskWorkerForTestingAsync) {
+      throw new UnavailabilityError('BackgroundTask', 'triggerTaskWorkerForTestingAsync');
+    }
+    console.log('Calling triggerTaskWorkerForTestingAsync');
+    return await ExpoBackgroundTaskModule.triggerTaskWorkerForTestingAsync();
+  } else {
+    return Promise.resolve(false);
+  }
+}
 
 // Export types
 export {
